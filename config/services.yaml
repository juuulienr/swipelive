parameters:
    locale: 'fr'
    uploads_directory: '%kernel.project_dir%/public/uploads'
    cloudinary: '%env(CLOUDINARY_URL)%'
    environment: '%env(APP_ENV)%'
    stripe_pk: '%env(STRIPE_PK)%'
    stripe_sk: '%env(STRIPE_SK)%'
    agora_app_id: '%env(AGORA_APP_ID)%'
    agora_app_certificate: '%env(AGORA_APP_CERTIFICATE)%'
    agora_customer_id: '%env(AGORA_CUSTOMER_ID)%'
    agora_customer_secret: '%env(AGORA_CUSTOMER_SECRET)%'
    facebook_app_id: '%env(FACEBOOK_APP_ID)%'
    facebook_app_secret: '%env(FACEBOOK_APP_SECRET)%'
    pusher_app_id: '%env(PUSHER_APP_ID)%'
    pusher_key: '%env(PUSHER_KEY)%'
    pusher_secret: '%env(PUSHER_SECRET)%'
    s3_vendor: '%env(int:S3_STORAGE_VENDOR)%'
    s3_region: '%env(int:S3_STORAGE_REGION)%'
    s3_bucket: '%env(S3_BUCKET)%'
    s3_access_key: '%env(S3_ACCESS_KEY)%'
    s3_secret_key: '%env(S3_SECRET_KEY)%'
    firebase_credentials_path: '%kernel.project_dir%/config/firebase/swipe-live-firebase-adminsdk-o1xd4-d5db2c22a7.json'




services:
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'
    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    # App\Controller\Admin\:
        # resource: '../src/Controller/Admin'
        # tags: ['controller.service_arguments']
    App\Controller\Admin\:
        resource: '../src/Controller/Admin'
        tags: ['controller.service_arguments']
    App\Controller\App\:
        resource: '../src/Controller/App'
        tags: ['controller.service_arguments']
    App\Controller\Web\:
        resource: '../src/Controller/Web'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Normalizer\EntityNormalizer:
        public: false
        autowire: true
        autoconfigure: true
        tags:
          - { name: serializer.normalizer }services:

    Doctrine\Persistence\ObjectManager: '@doctrine.orm.default_entity_manager'

    App\Service\FirebaseMessagingService:
        arguments: []
        
    Bugsnag\Client: '@bugsnag'
    # App\Command\RemoveWaitingLive:
    # tags: ['console.command']

    Logtail\Monolog\LogtailHandler:
        arguments:
            $sourceToken: '%env(LOGTAIL_TOKEN)%'

    Kreait\Firebase\Factory:
        class: Kreait\Firebase\Factory
        arguments:
            - '%kernel.project_dir%/config/firebase/swipe-live-firebase-adminsdk-o1xd4-d5db2c22a7.json'

    Kreait\Firebase\Messaging:
        factory: ['@Kreait\Firebase\Factory', 'createMessaging']

    App\Service\VideoProcessor:
        arguments:
            $entityManager: '@doctrine.orm.entity_manager'
            $s3Client: '@Aws\S3\S3Client'



